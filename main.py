from google import genai
from pydantic import BaseModel
import os
from fastapi import FastAPI

#inciializado o fastapi
app = FastAPI()

#incializando o cliente gemini
client = genai.Client(api_key=os.getenv("GENAI_API_KEY"))


#modelos de entrada e de sa√≠da
class Entrada(BaseModel):
    topico_de_estudo: str
    prazo: str

    #Fun√ß√£o que extrai o n√∫mero (quantidade) do campo "prazo"
    @property
    def prazo_numero(self):
        import re  # Importa o m√≥dulo de express√µes regulares (regex), usado para buscar padr√µes em texto

        # Procura na string 'self.prazo' uma sequ√™ncia de um ou mais d√≠gitos (0‚Äì9)
        match = re.search(r"\d+", self.prazo) # Procura na string 'self.prazo' uma sequ√™ncia de um ou mais d√≠gitos (0‚Äì9)

        # Se encontrou um n√∫mero, converte para inteiro e retorna
        # Caso contr√°rio (ex: se o usu√°rio digitou algo sem n√∫mero), retorna 0 por padr√£o
        return int(match.group()) if match else 0
    # üîπ Propriedade que extrai a unidade de tempo (palavra) do campo "prazo"
    @property
    def prazo_palavra(self):
        import re  # Importa novamente o m√≥dulo de express√µes regulares

        # Procura na string 'self.prazo' uma sequ√™ncia de letras (A-Z ou com acento)
        match = re.search(r"[A-Za-z√Ä-√ø]+", self.prazo)

        # Se encontrou uma palavra, transforma em min√∫sculas e retorna, se nao encontrou, retorna "dias" como valor padr√£o
        return match.group().lower() if match else "dias"
    
    #padronizando prazos para dias
    def prazo_em_dias(self):
        if self.prazo_palavra == "semanas" or self.prazo_palavra == "semana":
           return self.prazo_numero *7
        elif self.prazo_palavra == "meses" or self.prazo_palavra == "mes" or self.prazo_palavra == "m√™s":
            return self.prazo_numero * 30
        else:
            return self.prazo_numero



class Sa√≠da(BaseModel):
    dias_de_estudo: list[str]

@app.post("/gerar-agenda")
def gerar_agenda(req: Entrada):
    """
    Gera o plano de estudos pelo Gemini
    """

    prompt = f"""
Voc√™ √© um assistente especializado em organizar planos de estudo de forma l√≥gica, progressiva e realista.

O estudante informou:
- Tema de estudo: "{req.topico_de_estudo}"
- Prazo original: "{req.prazo}"
- Prazo convertido: {req.prazo_em_dias()} dias

Crie um **plano de estudos completo**, dividido em exatamente {req.prazo_em_dias()} dias, numerados de 1 at√© {req.prazo_em_dias()}.

Cada item deve seguir o formato:
"Dia X: [conte√∫do a ser estudado]"

Regras importantes:
- Crie exatamente {req.prazo_em_dias()} itens (nem mais, nem menos).
- Use linguagem clara e objetiva.
- Estruture o plano de forma progressiva ‚Äî comece com os conceitos b√°sicos e avance para os mais complexos.
- Se o prazo for maior que o necess√°rio, utilize os dias restantes com revis√µes, exerc√≠cios ou aplica√ß√µes pr√°ticas.
- N√ÉO inclua explica√ß√µes fora do formato JSON.

Formato esperado (exemplo para 3 dias):
{{
  "dias_de_estudo": [
    "Dia 1: Introdu√ß√£o ao tema e conceitos b√°sicos",
    "Dia 2: Estudo aprofundado dos principais t√≥picos",
    "Dia 3: Revis√£o geral e exerc√≠cios pr√°ticos"
  ]
}}

Retorne **somente o JSON**, nada mais.
"""






    response = client.models.generate_content(
    model="gemini-2.5-flash",
    #prompt que eu criei
    contents= prompt, 
    config={
        "response_mime_type": "application/json",
        "response_schema": list[Sa√≠da], #ensina ao gemini a transformar esse JSON em uma lista de objetos python do tipo rotina
    },
    )

    #converte a resposta da API em uma lista de objetos Rotina para facilitar o acesso aos dados.
    agenda: list[Sa√≠da] = response.parsed

    # retorna a resposta final para o front-end em formato JSON
    # cada item em 'agenda' √© um objeto Pydantic do tipo 'Sa√≠da'
    # o m√©todo .dict() converte esses objetos em dicion√°rios Python
    # a list comprehension [a.dict() for a in agenda] cria uma lista com esses dicion√°rios
    # por fim, tudo √© agrupado dentro de um dicion√°rio com a chave "agenda"
    # o FastAPI converte automaticamente esse dicion√°rio em JSON antes de enviar ao front-end
    return {"agenda": [a.dict() for a in agenda]}
    

    #para testar: 
    #1- inicializar a chave da api: export GENAI_API_KEY="sua_chave_aqui"
    #2- colocar isso no terminal: uvicorn main:app --reload
    #3- abrir esse link: http://127.0.0.1:8000/docs

